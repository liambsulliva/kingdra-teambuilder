// Impossible not to use "any" for error handling :D
/* eslint-disable @typescript-eslint/no-explicit-any */

import { NextApiRequest, NextApiResponse } from 'next';
import { getAuth } from '@clerk/nextjs/server';
import dbConnect, { User } from '../../lib/db';

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
	await dbConnect();
	const { userId } = getAuth(req);
	if (!userId) {
		return res.status(401).json({ message: 'Unauthorized' });
	}

	let user = await User.findOne({ clerkUserId: userId });

	if (!user) {
		user = new User({
			clerkUserId: userId,
			pokemonParty: [[]],
			teamNames: ['Team 1'],
		});
		await user.save();
		console.log('New user created:', user);
	}

	if (req.method === 'GET') {
		try {
			res.status(200).json({ teamNames: user.teamNames });
		} catch (error: any) {
			console.error('Failed to fetch team names:', error);
			res.status(500).json({
				message: 'Failed to fetch team names',
				error: error.message,
			});
		}
	} else if (req.method === 'POST') {
		try {
			const { teamNames } = req.body;
			if (!Array.isArray(teamNames)) {
				res.status(400).json({
					message: 'Invalid request body. Expected teamNames array.',
				});
				return;
			}

			user.teamNames = teamNames;
			await user.save();
			res.status(201).json({ message: 'Team names updated successfully' });
		} catch (error: any) {
			res.status(500).json({
				message: 'Failed to update team names',
				error: error.message,
			});
		}
	} else {
		res.setHeader('Allow', ['GET', 'POST']);
		res.status(405).end(`Method ${req.method} Not Allowed`);
	}
};

export default handler;
